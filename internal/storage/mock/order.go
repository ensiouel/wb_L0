// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/ensiouel/wb_L0/internal/model"
	"github.com/ensiouel/wb_L0/internal/storage"
	"sync"
)

// Ensure, that OrderStorageMock does implement OrderStorage.
// If this is not the case, regenerate this file with moq.
var _ storage.OrderStorage = &OrderStorageMock{}

// OrderStorageMock is a mock implementation of OrderStorage.
//
//	func TestSomethingThatUsesOrderStorage(t *testing.T) {
//
//		// make and configure a mocked OrderStorage
//		mockedOrderStorage := &OrderStorageMock{
//			CreateFunc: func(ctx context.Context, order model.Order) error {
//				panic("mock out the Create method")
//			},
//			GetFunc: func(ctx context.Context, uid string) (model.Order, error) {
//				panic("mock out the Get method")
//			},
//			SelectFunc: func(ctx context.Context) ([]model.Order, error) {
//				panic("mock out the Select method")
//			},
//		}
//
//		// use mockedOrderStorage in code that requires OrderStorage
//		// and then make assertions.
//
//	}
type OrderStorageMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, order model.Order) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, uid string) (model.Order, error)

	// SelectFunc mocks the Select method.
	SelectFunc func(ctx context.Context) ([]model.Order, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order model.Order
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UID is the uid argument value.
			UID string
		}
		// Select holds details about calls to the Select method.
		Select []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCreate sync.RWMutex
	lockGet    sync.RWMutex
	lockSelect sync.RWMutex
}

// Create calls CreateFunc.
func (mock *OrderStorageMock) Create(ctx context.Context, order model.Order) error {
	if mock.CreateFunc == nil {
		panic("OrderStorageMock.CreateFunc: method is nil but OrderStorage.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Order model.Order
	}{
		Ctx:   ctx,
		Order: order,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, order)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedOrderStorage.CreateCalls())
func (mock *OrderStorageMock) CreateCalls() []struct {
	Ctx   context.Context
	Order model.Order
} {
	var calls []struct {
		Ctx   context.Context
		Order model.Order
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *OrderStorageMock) Get(ctx context.Context, uid string) (model.Order, error) {
	if mock.GetFunc == nil {
		panic("OrderStorageMock.GetFunc: method is nil but OrderStorage.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		UID string
	}{
		Ctx: ctx,
		UID: uid,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, uid)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedOrderStorage.GetCalls())
func (mock *OrderStorageMock) GetCalls() []struct {
	Ctx context.Context
	UID string
} {
	var calls []struct {
		Ctx context.Context
		UID string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Select calls SelectFunc.
func (mock *OrderStorageMock) Select(ctx context.Context) ([]model.Order, error) {
	if mock.SelectFunc == nil {
		panic("OrderStorageMock.SelectFunc: method is nil but OrderStorage.Select was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSelect.Lock()
	mock.calls.Select = append(mock.calls.Select, callInfo)
	mock.lockSelect.Unlock()
	return mock.SelectFunc(ctx)
}

// SelectCalls gets all the calls that were made to Select.
// Check the length with:
//
//	len(mockedOrderStorage.SelectCalls())
func (mock *OrderStorageMock) SelectCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockSelect.RLock()
	calls = mock.calls.Select
	mock.lockSelect.RUnlock()
	return calls
}
